// <auto-generated />
using System;
using AntiSSH.Auth.ECC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AntiSSH.Auth.ECC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506070949_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AntiSSH.Auth.ECC.Models.EncryptedKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Iv")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("LastNonce")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PublicKey")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("EncryptedKeys");
                });

            modelBuilder.Entity("AntiSSH.Auth.ECC.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("EncryptedKeyId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EncryptedKeyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AntiSSH.Auth.ECC.Models.User", b =>
                {
                    b.HasOne("AntiSSH.Auth.ECC.Models.EncryptedKey", "EncryptedKey")
                        .WithMany()
                        .HasForeignKey("EncryptedKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncryptedKey");
                });
#pragma warning restore 612, 618
        }
    }
}
